library(GenomicRanges)
library(ggplot2)
library(ggpubr)
require(BiocGenerics)
library(rtracklayer)
library(gridBase)
workdir = "~/Bureau/tdefreitas_genobioinfo/PROJET_H2AV_2025/"
source(paste0(workdir,"functionR/Script_HEATMAP_profile.R"))
outfig=paste0(workdir,"FIGURES/HEATMAP/H3K36me3_SEA4_WT3/BY_ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f/")
GNref = readRDS(paste0(workdir,"DATA/LIST_FEATURES/LIST_GN_ACTIFS.RDS"))
LIST_QUANTIF_K36=readRDS(paste0(workdir,"DATA/LIST_FEATURES/LIST_QUANTIF_K36.RDS"))
LIST_QUANTIF=readRDS(paste0(workdir,"DATA/LIST_FEATURES/LIST_QUANTIF.RDS"))
ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f = LIST_QUANTIF_K36$ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f
ZSCORE_H2AV_GB_WT_N = LIST_QUANTIF$ZSCORE_H2AV_GB_WT_N
TOP5_ZSCORE_H2AV_GB_WT_N = getNameList(ZSCORE_H2AV_GB_WT_N, topdown = "down", prct = 5)
getNameList = function(Vec, topdown = "top", prct = 10){
Vec = Vec[order(Vec, decreasing=T)]
if(topdown %in% "top"){
GN = names(Vec[Vec > quantile(Vec, (100-prct)/100)])
}
if(topdown %in% "down"){
GN = names(Vec[Vec < quantile(Vec, (prct)/100)])
}
if(topdown %in% "mid"){
tmp1 = names(Vec[Vec < quantile(Vec, (100/2-prct/2)/100)])
tmp2 = names(Vec[Vec < quantile(Vec, (100/2-prct/2+prct)/100)])
GN = tmp2[tmp2 %ni% tmp1]
}
return(GN)
}
TOP5_ZSCORE_H2AV_GB_WT_N = getNameList(ZSCORE_H2AV_GB_WT_N, topdown = "down", prct = 5)
ZSCORE_PROFMAT_DRIP_HLuc_vs_HLuc_RNAse = readRDS(paste0(workdir,"DATA/ZSCORE/ZSCORE_PROFMAT_DRIP_HLuc_vs_HLuc_RNAse.RDS"))
ZSCORE_PROFMAT_DRIP_Nelf_vs_Nelf_RNAse =  readRDS(paste0(workdir,"DATA/ZSCORE/ZSCORE_PROFMAT_DRIP_Nelf_vs_Nelf_RNAse.RDS"))
rangeheatmap = c(1:1000)
ZSCORE_PROFMAT_DRIP_Nelf_vs_Nelf_RNAse
ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f
TOP5_ZSCORE_H2AV_GB_WT_N
ZSCORE_H2AV_GB_WT_N
ZSCORE_H2AV_GB_WT_N[0:649*0.25,]
ZSCORE_H2AV_GB_WT_N[0:(649*0.25),]
ZSCORE_H2AV_GB_WT_N[1:(649*0.25),]
ZSCORE_H2AV_GB_WT_N[1:3,]
ZSCORE_H2AV_GB_WT_N[1:3]
ZSCORE_H2AV_GB_WT_N[1:(649*0.25)]
fisher.test(TOP5,ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f)
TOP5 = ZSCORE_H2AV_GB_WT_N[1:(649*0.25)]
fisher.test(TOP5,ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f)
fisher.test(TOP5,TOP5_H3)
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(649*0.25)]
fisher.test(TOP5,TOP5_H3)
fisher.test(TOP5,TOP5_H3, simulate.p.value = T)
fisher.test(TOP5,TOP5_H3, simulate.p.value = T, alternative = "greater")
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
intersect(top5_H2AV, top5_H3K36me3)
intersect(top5_H2AV, names(ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f))
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
TOP5 = ZSCORE_H2AV_GB_WT_N[1:(649*0.5)]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(649*0.5)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f
ZSCORE_H2AV_GB_WT_N
TOP5 = ZSCORE_H2AV_GB_WT_N[(649*0.25):649]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(649*0.25)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
TOP5 = ZSCORE_H2AV_GB_WT_N[(649*0.5):649]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(649*0.5)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
TOP5 = ZSCORE_H2AV_GB_WT_N[(649*0.5):]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(649*0.5)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
TOP5
intersect(ZSCORE_H2AV_GB_WT_N, ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f)
intersect(names(ZSCORE_H2AV_GB_WT_N), names(ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f))
len = length(ZSCORE_H2AV_GB_WT_N)
TOP5 = ZSCORE_H2AV_GB_WT_N[(len*0.5):]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(len*0.5)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
len = length(ZSCORE_H2AV_GB_WT_N)
TOP5 = ZSCORE_H2AV_GB_WT_N[(len*0.5):len]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(len*0.5)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
len = length(ZSCORE_H2AV_GB_WT_N)
TOP5 = ZSCORE_H2AV_GB_WT_N[(len*0.05):len]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(len*0.05)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
len = length(ZSCORE_H2AV_GB_WT_N)
TOP5 = ZSCORE_H2AV_GB_WT_N[(len*0.25):len]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(len*0.25)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
len = length(ZSCORE_H2AV_GB_WT_N)
TOP5 = ZSCORE_H2AV_GB_WT_N[(len*0.75):len]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(len*0.25)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
len = length(ZSCORE_H2AV_GB_WT_N)
TOP5 = ZSCORE_H2AV_GB_WT_N[(len*0.95):len]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(len*0.05)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
len = length(ZSCORE_H2AV_GB_WT_N)
TOP5 = ZSCORE_H2AV_GB_WT_N[(len*0.95):len]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(len)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
len = length(ZSCORE_H2AV_GB_WT_N)
TOP5 = ZSCORE_H2AV_GB_WT_N[(len*0.95):len]
TOP5_H3 = ZSCORE_H3K36me3_2C4_H3K36me3_2N4_f[1:(len*0.05)]
genes_all <- rownames(ZSCORE_H2AV_GB_WT_N)  # ou un vecteur de tous les gènes considérés
top5_H2AV <- names(TOP5)
top5_H3K36me3 <- names(TOP5_H3)
# Calcul des catégories
a <- length(intersect(top5_H2AV, top5_H3K36me3))  # dans les deux
b <- length(setdiff(top5_H2AV, top5_H3K36me3))    # dans H2AV seulement
c <- length(setdiff(top5_H3K36me3, top5_H2AV))    # dans H3K36me3 seulement
d <- length(setdiff(genes_all, union(top5_H2AV, top5_H3K36me3)))  # dans aucun
# Tableau de contingence
contingency_table <- matrix(c(a, b, c, d), nrow = 2)
fisher.test(contingency_table)
contingency_table
ZSCORE_H2AV_GB_WT_N
tail(ZSCORE_H2AV_GB_WT_N)
ZSCORE_H2AV_GB_WT_N[names(ZSCORE_H2AV_GB_WT_N, order(ZSCORE_H2AV_GB_WT_N))]
order(ZSCORE_H2AV_GB_WT_N)
order(names(ZSCORE_H2AV_GB_WT_N)
)
workdir = "~/Bureau/tdefreitas_genobioinfo/PROJET_H2AV_2025/"
source(paste0(workdir,"functionR/Boxplot_wilcoxListFilter_REF.R"))
outfig = paste0(workdir,"FIGURES/BOXPLOT/BOXPLOT_DRIP/")
ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse = readRDS(paste0(workdir,"DATA/ZSCORE/ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse.RDS"))
ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse =  readRDS(paste0(workdir,"DATA/ZSCORE/ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse.RDS"))
ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse
ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse
LIST_QUANTIF=readRDS(paste0(workdir,"DATA/LIST_FEATURES/LIST_QUANTIF.RDS"))
LIST_QUANTIF$ZSCORE_H2AV_GB_WT_N
tail( LIST_QUANTIF$ZSCORE_H2AV_GB_WT_N)
LIST_ZSCORE_H2AV_GB_WT_N = getNameList(ZSCORE_H2AV_GB_WT_N, topdown = "down", prct = 5)
getNameList = function(Vec, topdown = "top", prct = 10){
Vec = Vec[order(Vec, decreasing=T)]
if(topdown %in% "top"){
GN = names(Vec[Vec > quantile(Vec, (100-prct)/100)])
}
if(topdown %in% "down"){
GN = names(Vec[Vec < quantile(Vec, (prct)/100)])
}
if(topdown %in% "mid"){
tmp1 = names(Vec[Vec < quantile(Vec, (100/2-prct/2)/100)])
tmp2 = names(Vec[Vec < quantile(Vec, (100/2-prct/2+prct)/100)])
GN = tmp2[tmp2 %ni% tmp1]
}
return(GN)
}
LIST_ZSCORE_H2AV_GB_WT_N = getNameList(ZSCORE_H2AV_GB_WT_N, topdown = "down", prct = 5)
ZSCORE_H2AV_GB_WT_N = LIST_QUANTIF$ZSCORE_H2AV_GB_WT_N
LIST_ZSCORE_H2AV_GB_WT_N = getNameList(ZSCORE_H2AV_GB_WT_N, topdown = "down", prct = 5)
LIST_ZSCORE_H2AV_GB_WT_N
LIST_ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse = getNameList(ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse, topdown = "top", prct = 5)
Reduce(intersect, list(LIST_ZSCORE_H2AV_GB_WT_N,LIST_ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse))
intersect, list(LIST_ZSCORE_H2AV_GB_WT_N,LIST_ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse)
Reduce(intersect, list(LIST_ZSCORE_H2AV_GB_WT_N,LIST_ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse))
LIST_ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse = getNameList(ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse, topdown = "bot", prct = 25)
Reduce(intersect, list(LIST_ZSCORE_H2AV_GB_WT_N,LIST_ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse,LIST_ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse))
LIST_ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse = getNameList(ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse, topdown = "down", prct = 25)
Reduce(intersect, list(LIST_ZSCORE_H2AV_GB_WT_N,LIST_ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse,LIST_ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse))
LIST_ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse = getNameList(ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse, topdown = "down", prct = 50)
Reduce(intersect, list(LIST_ZSCORE_H2AV_GB_WT_N,LIST_ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse,LIST_ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse))
LIST_ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse = getNameList(ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse, topdown = "down", prct = 75)
Reduce(intersect, list(LIST_ZSCORE_H2AV_GB_WT_N,LIST_ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse,LIST_ZSCORE_PROFMAT_Q_DRIP_HLuc_vs_HLuc_RNAse))
Reduce(intersect, list(LIST_ZSCORE_H2AV_GB_WT_N,LIST_ZSCORE_PROFMAT_Q_DRIP_Nelf_vs_Nelf_RNAse))
